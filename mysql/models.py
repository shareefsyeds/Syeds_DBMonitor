from django.db import models
from django.utils import timezone

class MysqlStat(models.Model):
    tags = models.CharField("Label",max_length=32)
    host = models.CharField("Host ip",max_length=32)
    port = models.IntegerField("Database port number",default=1521)
    version = models.CharField("Database version",max_length=64,blank=True,null=True)
    updays = models.IntegerField("Run the number of days",blank=True,null=True)
    basedir = models.CharField("MySQL path",max_length=255,blank=True,null=True)
    datadir = models.CharField("Data repository paths",max_length=255,blank=True,null=True)
    slow_query_log = models.CharField("Slow query log is open",max_length=32,blank=True,null=True)
    slow_query_log_file = models.CharField("Slow query log path",max_length=255,blank=True,null=True)
    log_bin = models.CharField("Binlog whether open",max_length=255,blank=True,null=True)
    max_connections = models.IntegerField("Maximum number of connections",blank=True,null=True)
    max_connect_errors = models.IntegerField("Biggest mistake the number of connections",blank=True,null=True)
    total_rows = models.FloatField("Total database size(GB)",blank=True, null=True)
    data_size = models.FloatField("Data size(GB)",blank=True, null=True)
    index_size = models.FloatField("Index size(GB)",blank=True, null=True)
    threads_connected = models.IntegerField("Connection number of threads",blank=True,null=True)
    threads_running = models.IntegerField("Number of threads running",blank=True,null=True)
    threads_waited = models.IntegerField("Waiting for the number of threads",blank=True,null=True)
    threads_created = models.IntegerField("Create a number of threads",blank=True,null=True)
    threads_cached = models.IntegerField("Cache the number of threads",blank=True,null=True)
    qps = models.IntegerField("Query requests per second",blank=True, null=True)
    tps = models.IntegerField("Transactions per second",blank=True, null=True)
    bytes_received = models.FloatField("Receiving number per second (KB)",blank=True, null=True)
    bytes_sent = models.FloatField("Send word number per second (KB)",blank=True, null=True)
    open_files_limit = models.IntegerField("Open the largest number of files",blank=True, null=True)
    open_files = models.IntegerField("Open the file number",blank=True, null=True)
    table_open_cache = models.IntegerField("Largest open the table number",blank=True, null=True)
    open_tables = models.IntegerField("Open the table number",blank=True, null=True)
    key_buffer_size = models.FloatField("Index buffer size",blank=True,null=True)
    sort_buffer_size = models.FloatField("Sort buffer size",blank=True,null=True)
    join_buffer_size = models.FloatField("Connect buffer size",blank=True,null=True)
    key_blocks_unused = models.IntegerField("Unused buffer block number",blank=True, null=True)
    key_blocks_used = models.IntegerField("Number of buffer block has been used",blank=True, null=True)
    key_blocks_not_flushed = models.IntegerField("Has changed but has not been updated number keys to hard disk",blank=True, null=True)
    mysql_sel = models.IntegerField("Query the number",blank=True,null=True)
    mysql_ins = models.IntegerField("Insert statement number",blank=True,null=True)
    mysql_upd = models.IntegerField("Update statement number",blank=True,null=True)
    mysql_del = models.IntegerField("Delete statements number",blank=True,null=True)
    select_scan = models.IntegerField("Full table scan number",blank=True,null=True)
    slow_queries = models.IntegerField("Slow query number",blank=True,null=True)
    key_read_requests = models.IntegerField("Read the index number of requests from the cache",blank=True,null=True)
    key_reads = models.IntegerField("Read from disk index request times",blank=True,null=True)
    key_write_requests = models.IntegerField("Write the request of the index number by caching",blank=True,null=True)
    key_writes = models.IntegerField("Through the disk write index request times",blank=True,null=True)
    innodb_buffer_pool_size = models.FloatField("Innodb buffer pool size (bytes)",blank=True,null=True)
    innodb_buffer_pool_pages_total = models.IntegerField("Innodb buffer pool size (page number)",blank=True,null=True)
    innodb_buffer_pool_pages_data = models.IntegerField("Innodb data in the buffer pool page number (including the dirty pages)",blank=True,null=True)
    innodb_buffer_pool_pages_dirty = models.IntegerField("Innodb number of dirty pages in the buffer pool",blank=True,null=True)
    innodb_buffer_pool_pages_free = models.IntegerField("Innodb buffer pool residual page number",blank=True,null=True)
    innodb_buffer_pool_hit = models.FloatField("Innodb buffer cache hit ratio",blank=True,null=True)
    innodb_io_capacity = models.IntegerField("Buffer to refresh the dirty pagesä¸€The number of times to refresh",blank=True,null=True)
    innodb_read_io_threads = models.IntegerField("Innodb read number of threads",blank=True,null=True)
    innodb_write_io_threads = models.IntegerField("Innodb write number of threads",blank=True,null=True)
    innodb_rows_deleted = models.IntegerField("Innodb to delete the number of rows per second",blank=True,null=True)
    innodb_rows_inserted = models.IntegerField("Innodb insert the number of rows per second",blank=True,null=True)
    innodb_rows_read = models.IntegerField("Innodb rows read per second",blank=True,null=True)
    innodb_rows_updated = models.IntegerField("Innodb update the number of rows per second",blank=True,null=True)
    innodb_row_lock_waits = models.IntegerField("Innodb starts to now waiting for the number of times altogether",blank=True,null=True)
    innodb_row_lock_time_avg = models.FloatField("Waiting for the average time spent at a time",blank=True,null=True)
    innodb_buffer_pool_pages_flushed = models.IntegerField("The frequency of the innodb dirty page refresh",blank=True,null=True)
    innodb_data_read = models.FloatField("Innodb read the amount of data",blank=True,null=True)
    innodb_data_written = models.FloatField("iNnodb write the amount of data",blank=True,null=True)
    innodb_data_reads = models.IntegerField("Innodb read requests",blank=True,null=True)
    innodb_data_writes = models.IntegerField("Innodb write requests",blank=True,null=True)
    innodb_log_writes = models.IntegerField("Innodb log write the number",blank=True,null=True)
    innodb_data_fsyncs = models.IntegerField("Number of data refresh",blank=True,null=True)
    innodb_os_log_written = models.FloatField("Write the number of bytes of redo log innodb",blank=True,null=True)
    status = models.IntegerField("Database connection state 0 success 1 failed",blank=True, null=True)
    check_time = models.DateTimeField("Acquisition time",default=timezone.now,blank=True, null=True)

    def __str__(self):
        return self.tags

    class Meta:
        db_table = 'mysql_stat'
        verbose_name = "mysql database collect data"
        verbose_name_plural = verbose_name


class MysqlSlowquery(models.Model):
    tags = models.CharField("Label",max_length=32)
    host = models.CharField("Host ip",max_length=256)
    start_time  = models.CharField("Execution time",max_length=64)
    client_host = models.CharField("Host information",max_length=64)
    db_name = models.CharField("Database name",max_length=64)
    sql_text = models.TextField("sql text")
    query_time = models.FloatField("Execution time (in seconds)")
    lock_time = models.FloatField("Lock wait time (in seconds)")
    rows_examined = models.IntegerField("Scan lines",blank=True, null=True)
    rows_sent = models.IntegerField("Returns client rows",blank=True, null=True)
    thread_id = models.CharField("Thread number",max_length=64)
    check_time = models.DateTimeField("Acquisition time",default=timezone.now,blank=True, null=True)

    def __str__(self):
        return self.tags

    class Meta:
        db_table = 'mysql_slowquery'
        verbose_name = "mysql the slow query data"
        verbose_name_plural = verbose_name


class MysqlStatHis(models.Model):
    tags = models.CharField("Label",max_length=32)
    host = models.CharField("Host IP",max_length=32)
    port = models.IntegerField("Database port number",default=1521)
    version = models.CharField("Database version",max_length=64,blank=True,null=True)
    updays = models.IntegerField("Run the number of days",blank=True,null=True)
    basedir = models.CharField("MySQL path",max_length=255,blank=True,null=True)
    datadir = models.CharField("Data repository paths",max_length=255,blank=True,null=True)
    slow_query_log = models.CharField("Slow query log is open",max_length=32,blank=True,null=True)
    slow_query_log_file = models.CharField("Slow query log path",max_length=255,blank=True,null=True)
    log_bin = models.CharField("Whether the binlog open",max_length=255,blank=True,null=True)
    max_connections = models.IntegerField("Maximum number of connections",blank=True,null=True)
    max_connect_errors = models.IntegerField("Biggest mistake the number of connections",blank=True,null=True)
    total_rows = models.FloatField("Total database size (GB)",blank=True, null=True)
    data_size = models.FloatField("Data size (GB)",blank=True, null=True)
    index_size = models.FloatField("Index size (GB)",blank=True, null=True)
    threads_connected = models.IntegerField("Connection number of threads",blank=True,null=True)
    threads_running = models.IntegerField("Running threads",blank=True,null=True)
    threads_waited = models.IntegerField("Waiting for the number of threads",blank=True,null=True)
    threads_created = models.IntegerField("Create a number of threads",blank=True,null=True)
    threads_cached = models.IntegerField("Caching threads",blank=True,null=True)
    qps = models.IntegerField("Query requests per second",blank=True, null=True)
    tps = models.IntegerField("Transactions per second",blank=True, null=True)
    bytes_received = models.FloatField("Receiving number per second (KB)",blank=True, null=True)
    bytes_sent = models.FloatField("Send word number per second (KB)",blank=True, null=True)
    open_files_limit = models.IntegerField("Open the largest number of files",blank=True, null=True)
    open_files = models.IntegerField("Open the file number",blank=True, null=True)
    table_open_cache = models.IntegerField("The largest open the table number",blank=True, null=True)
    open_tables = models.IntegerField("Open the table number",blank=True, null=True)
    key_buffer_size = models.FloatField("Index buffer size",blank=True,null=True)
    sort_buffer_size = models.FloatField("Sort buffer size",blank=True,null=True)
    join_buffer_size = models.FloatField("Connect the buffer size",blank=True,null=True)
    key_blocks_unused = models.IntegerField("Unused buffer block number",blank=True, null=True)
    key_blocks_used = models.IntegerField("Is the use of the number of buffer block",blank=True, null=True)
    key_blocks_not_flushed = models.IntegerField("Has changed but hasn't update the number of keys to hard disk",blank=True, null=True)
    mysql_sel = models.IntegerField("Query number",blank=True,null=True)
    mysql_ins = models.IntegerField("Insert statement number",blank=True,null=True)
    mysql_upd = models.IntegerField("Update statement number",blank=True,null=True)
    mysql_del = models.IntegerField("Delete statements number",blank=True,null=True)
    select_scan = models.IntegerField("Full table scan number",blank=True,null=True)
    slow_queries = models.IntegerField("Slow query number",blank=True,null=True)
    key_read_requests = models.IntegerField("Read from the cache the request of the index number",blank=True,null=True)
    key_reads = models.IntegerField("Read from disk index request times.",blank=True,null=True)
    key_write_requests = models.IntegerField("Written by caching index request times.",blank=True,null=True)
    key_writes = models.IntegerField("Through the disk write index request times",blank=True,null=True)
    innodb_buffer_pool_size = models.FloatField("Innodb buffer pool size (bytes)",blank=True,null=True)
    innodb_buffer_pool_pages_total = models.IntegerField("Innodb buffer pool size (page number)",blank=True,null=True)
    innodb_buffer_pool_pages_data = models.IntegerField("Innodb data in the buffer pool page number (including the dirty pages)",blank=True,null=True)
    innodb_buffer_pool_pages_dirty = models.IntegerField("Innodb number of dirty pages in the buffer pool",blank=True,null=True)
    innodb_buffer_pool_pages_free = models.IntegerField("Innodb buffer pool residual page number",blank=True,null=True)
    innodb_buffer_pool_hit = models.FloatField("Innodb buffer cache hit ratio",blank=True,null=True)
    innodb_io_capacity = models.IntegerField("From the buffer to refresh the dirty pagesä¸€The number of times to refresh",blank=True,null=True)
    innodb_read_io_threads = models.IntegerField("Innodb read number of threads",blank=True,null=True)
    innodb_write_io_threads = models.IntegerField("Innodb write number of threads",blank=True,null=True)
    innodb_rows_deleted = models.IntegerField("Innodb to delete the number of rows per second",blank=True,null=True)
    innodb_rows_inserted = models.IntegerField("Innodb insert the number of rows per second",blank=True,null=True)
    innodb_rows_read = models.IntegerField("Innodb rows read per second",blank=True,null=True)
    innodb_rows_updated = models.IntegerField("Innodb update the number of rows per second",blank=True,null=True)
    innodb_row_lock_waits = models.IntegerField("Innodb starts to now waiting for the number of times altogether",blank=True,null=True)
    innodb_row_lock_time_avg = models.FloatField("Waiting for the average time spent at a time",blank=True,null=True)
    innodb_buffer_pool_pages_flushed = models.IntegerField("Frequency of the innodb dirty page refresh",blank=True,null=True)
    innodb_data_read = models.FloatField("Inodb read the amount of data",blank=True,null=True)
    innodb_data_written = models.FloatField("Write the amount of data the innodb",blank=True,null=True)
    innodb_data_reads = models.IntegerField("Innodb read requests",blank=True,null=True)
    innodb_data_writes = models.IntegerField("Innodb write requests",blank=True,null=True)
    innodb_log_writes = models.IntegerField("Innodb log write the number",blank=True,null=True)
    innodb_data_fsyncs = models.IntegerField("Number of data refresh",blank=True,null=True)
    innodb_os_log_written = models.FloatField("Write the number of bytes of redo log innodb",blank=True,null=True)
    status = models.IntegerField("Database connection state 0 success 1 failed",blank=True, null=True)
    check_time = models.DateTimeField("Acquisition time",default=timezone.now,blank=True, null=True)

    def __str__(self):
        return self.tags

    class Meta:
        db_table = 'mysql_stat_his'
        verbose_name = "mysql database collect data"
        verbose_name_plural = verbose_name
